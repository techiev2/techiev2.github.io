{"name":"techiev2 || pythonista || philosoraptor","tagline":"Mirroring http://sriramvelamur.wordpress.com, a changelog of work","body": "# Opinion || Perceptions\r\n\r\nI stumbled upon a link to [this specific article](http://hbr.org/video/2363556817001/responding-when-your-expertise-is-challenged) (a video rather) on HBR a while back thanks to my LinkedIn feed. And not so surprising is the fact that the title reminded of some reverberations from a discussion earlier today. As much as it is debatable, the point of bringing across the identity did make sense. Getting back to the point on reverberations, during the course of my discussion I mentioned to the other  person that I have been working on some product that started out primarily as dogfooding and the fact that we are putting in efforts to push it beyond just that. I did receive standard response, which, just to keep the slate clean is certainly not demeaning nor is the usage of standard in the sense of common place arguments.\r\n\r\nThe response pointed out the fact that there wasn't quite a lot of engagement in well scaled products and in all fairness, an absolutely fair stance which I'd agree with, as a developer. Why would it be of paramount importance ? And what is the connection with the video article you wonder ? Let me clarify my stance. For starters, there is a general trend that I get to see in the developer community (pardon my usage of the word for it is based on the cohort I've interacted with and could, objectively speaking, be quite different) in not dirtying one's hands by getting out of the comfort zone. One could ascribe the non-comfort zone to be a totally different technology or implication or could even be dependencies.\r\n\r\nThis, unfortunately for the one who either cannot afford to, or does not want to, becomes a dampener when discussing about what one does, with a fellow developer and even worse, when you talk with an acquaintance, who dons a managerial cape. [Talking of which, an article from yesterday threw out a nice argument on 37 signals' stance on managers and a recent change is certainly worth a read]. How do you explain your lack of interfacing in full with large scale development that is expected of a developer beyond a certain point in time in their career ? I guess that's where the point that Ms. Deepa raises in the video mentioned earlier.\r\n\r\nAnd just to add, it is not an isolated case of not being to explain your lack of expertise as the one in front of you sees it as, it goes a long distance in one understanding the lacunae, so to speak in their trajectory and how best could they be addressed. Looking at this entire point from the perspective of appraisal discussions, interviews and the likes where you are answerable either towards a monetary benefit or work related doesn't certainly make any sense to me, at least. A constant process of introspection, I'd put this as, in working on what one is and what one wishes to be and working on it. And this very position on keeping oneself engaged, does in some sense remind me of the Lamarckian postulate on the lack of tails. At least, given personal experiences, I'd certainly give some sense of credibility to this entire view of loss of sheen in the thinking mind that enters an environment of close to zero expansion and has to adhere to 'feed them shit and keep them in the dark' either in spirit or otherwise. And speaking of which, the presence of quite open environments would attribute a further issue with people, initiatives, personal and not enforced which becomes quite pertinent a trait they ought to work on. I guess, I might be certainly needing this given the rather open environment I've been part of for a while now.\r\n\r\nAll said and done, as much as one wouldn't expect to take offense, by virtue of mature human behavior, when questions of expertise arise, the other end raising such views, should also adhere to such mature behavior when answered, for their notion primarily given the maturity is to ascertain the nature of the individual more than merely the presence of such technical skills, or otherwise, or so I guess.\r\n\r\n# Trough alert || Rant\r\n\r\nSo, I am officially in a state of 'lack of like for Apple hardware products'. A minor accident that left the superficial plastic layer above the display cracked is going to set me back by some 25k, I am informed. Reason ? Quite simple, they replace entire sets of components since they are tagged with serial numbers and would tamper with your warranty if you did replace only the cracked plastic that isn't harming the display one bit.\r\n\r\nAnd what would happen of the display that goes out ? My best guess is, the plastic being replaced and pushed into another assembly line for refurbished products. And who pays for it ? The idiot who chose to pay for such a product, or in this case, the idiot who has forced to use this product and had only the misfortune of meeting with an unforeseen mishap. Absolutely fantastic I must say.\r\n\r\nMy Toshiba cost me a third, works just fine, and I could probably replace close to 75% of the hardware at the cost of one single replacement. And for the build quality crap that I usually get to hear, (talking of which, I did have a good opinion myself about Apple's build quality, until this fiasco came about) I guess your pockets should be dumb enough as much as your brains to talk of "quality" in any sense of the word, any more. Just to keep the slate clean, I mean no offense when I talk of dumbness and it is merely a subjective identity ascribed to overlooking flaws just because they do not make a dent in the container.\r\n\r\nAnd every time I think of such products, I get reminded of Dad's example on a soap/shaving blade. I heard it first while a kid in 5th grade if my memory serves me right. Leaving aside the affordable nature or the lack thereof of products, he always has a point on such premium entities. 'Apart from some subjective satiation, what do these premium identities give me ? Functionally nothing or in some exceptional cases, close to nothing. Why then would I spend that much on them (at least in the case of those that do not stand up high on the functionality trait vis-a-vis *cheap* [sic] replacements) ?'. I haven't agreed much with this view of his till I started school I guess or could actually be college.\r\n\r\nGetting back to the point of how affordable products are, well I've been quite well conditioned for a few years now thanks to constraints on not spending much and squeezing the last bit of toothpaste, so to speak and that would only add to the reasons why I wouldn't certainly prefer *such premiums*. All said and done, it has been a rather rough patch for a while, the end of which, as a believer, I must say he is aware of, if not me. Working towards a break from this rather unwelcome spree and hopefully something otherwise turns up.\r\n\r\n# Spec || Python library\r\n\r\nProbably one of the most interesting tools, that interested me much when I started out with Javascript was [JSPerf](http://jsperf.com) second only to [JSLint](http://jslint.com) (and to a smaller extent, [JSHint](http://jshint.com), thanks to an extreme affinity to Crockford's ideals]. The tool built over the Benchmark.js library, provides a *visual* comparison of parallel implementations to a problem in terms of ops/sec. I could find some [Benchrun](http://code.google.com/p/benchrun/)implementations of a solution to this particular issue but for some queer reason, didn't appeal to me so sat down to write one myself, much like the joke on competing standards.\r\n\r\nThe one pertinent concern according to me at least, is some kind of reporting that [Pypy - Speed](http://speed.pypy.org) offers. Graphical, for that is how you figure things out relatively easier irrespective of how much you love the shell and dumb terminal outputs.\r\n\r\nThere could be two ends to this implementation attempt; either it encompassing the possible ways of actually profiling implementations with a visually comprehensible report or me understanding the nuances of working in a Pythonic manner. A win-win in either case I guess. Created a [rudimentary port](https://github.com/techiev2/Spec) stripped out to work with timeit initially, from an existing local repository that provides dis data along with profile/cProfile stats. Suggestions welcome.\r\n\r\n\r\n***\r\n\r\n# Pyteomics || Python toolset\r\n\r\nTIL that I feel bad that this repository was not available a few years earlier. A python library to work with proteomics pipelines and MS/LC-MS data in addition to some other handy tools. Fork off and contribute if you are into proteomics data and using Python for working with the same. http://hg.theorchromo.ru/pyteomics\r\n\r\n***\r\n\r\n# Pythonista || Application\r\n[Cross posted from official Yammer post]\r\n\r\nDo you opine the snake and the apple to be one vicious combination ? Leaving the religious undercurrents aside, here is one more real functional serpent, apple duo that shows a lot of promise. If my memory serves me right, one of our iOS developers told me about this product ([Pythonista](http://www.macstories.net/stories/automating-ios-how-pythonista-changed-my-workflow/)) a few months back. Nice to know that someone has used it extensively and Python is making some inroads into the iOS developers' camp; if not purely for iOS related work, some acceptance at the least. Acceptance as i see is in itself a hard to come by commodity for Python in certain pockets of development. Hope it goes a longer distance.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}